Calculating with 200000000 terms, and 1 threads
i = 0 x.a=1 x.b = 200000001
master thread: Now waiting for other threads...
(thread number 1 a = 1, b = 200000001)
(thread number 1 partial sum = 19.6910435919144)
Result: 19.6910435919144
real 0.49
user 0.37
sys 0.04
Calculating with 200000000 terms, and 2 threads
i = 0 x.a=1 x.b = 100000001
i = 1 x.a=100000001 x.b = 200000001
master thread: Now waiting for other threads...
(thread number 1 a = 1, b = 100000001)
(thread number 2 a = 100000001, b = 200000001)
(thread number 1 partial sum = 18.9978964138526)
(thread number 2 partial sum = 0.693147178059741)
Result: 19.6910435919123
real 0.29
user 0.41
sys 0.01
Calculating with 200000000 terms, and 3 threads
i = 0 x.a=1 x.b = 66666667
i = 1 x.a=66666667 x.b = 133333333
i = 2 x.a=133333333 x.b = 199999999
master thread: Now waiting for other threads...
(thread number 1 a = 1, b = 66666667)
(thread number 2 a = 66666667, b = 133333333)
(thread number 3 a = 133333333, b = 199999999)
(thread number 1 partial sum = 18.5924312982437)
(thread number 2 partial sum = 0.693147176810161)
(thread number 3 partial sum = 0.405465106858139)
Result: 19.691043581912
real 0.23
user 0.41
sys 0.01
Calculating with 200000000 terms, and 4 threads
i = 0 x.a=1 x.b = 50000001
i = 1 x.a=50000001 x.b = 100000001
i = 2 x.a=100000001 x.b = 150000001
i = 3 x.a=150000001 x.b = 200000001
master thread: Now waiting for other threads...
(thread number 4 a = 150000001, b = 200000001)
(thread number 3 a = 100000001, b = 150000001)
(thread number 2 a = 50000001, b = 100000001)
(thread number 1 a = 1, b = 50000001)
(thread number 4 partial sum = 0.287682071618549)
(thread number 3 partial sum = 0.405465106441426)
(thread number 1 partial sum = 18.3047492382933)
(thread number 2 partial sum = 0.693147175559714)
Result: 19.691043591913
real 0.20
user 0.45
sys 0.00
Now the Parrallel.For loop:
nterms = 200000000
Result: 13.8719270008517
real 1.01
user 10.06
sys 0.04
Using the Parrallel.For loop is slower, as the loop causes a race condition on the variable 'sum', meaning that the different threads have to wait for eachother. 
 Even with one thread you still get 'over parallatiation' where the overhead of creating new threads/splitting up the task to do the calculation is slower then just doing the calculation on the main thread.
